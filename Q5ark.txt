

【仕様書】
目標：レースをスタートして、ゴールした後までの仕様を決定する。

ゴールするまでに必要な要素
1.コースを作る (レース前)
2.車の能力指標(動かない時の指標)の設定をする (レース前)
3.車の動作アクション(動いている時の指標)の設定をする (レース中)
4.どんな情報を表示するかとその表示タイミング (レース前・レース中・レース後)
5.実際の挙動の流れを想定する(全体のイメージ)



【1.コースを作る】
目標：車が走るコースを作成する
作成物：コースタイプの配列
例) コース = [ [”コースタイプ",終了距離] , ["コースタイプ",終了距離] , ,,]

必要な要素
1.カーブ、ストレート,スタート、ゴールのコースタイプを作る
2.コースタイプの距離と許容速度を決める。
3.カーブ前では、ブレーキを確定で踏み、ブレーキの強さはランダムとする
4.カーブ中は何もしない。
5.コースを示す配列を作り、要素としてコースタイプを代入する。完成。



【2.車の能力指標の設定】
目標:車の性能値を決定する
作成物：性能値を追加した車のクラス



【3.車の動作アクションの設定をする】
目標：レース中の車の挙動を設定する
作成物：アクションの挙動を追加した車のクラス

必要な要素
1.アクセルを踏む
- 加速度 * 時間 で 上がる速度を算出
- 最高速度までは踏みっぱなし
2.ブレーキを踏む
- 減速度 * 時間 で 下がる速度を算出
- カーブ前のみ踏む
3.クラッシュ後の減速・遅延時間の設定
- 速度を10km/hにしちゃう。
- 遅延時間は一旦無しにする。


【4.どんな情報を表示するかとその表示タイミング】
目標: みている人にレースの情報をわかるようにする
作成物: レースの情報を表示するコード

必要な要素
1.スタートした時の表示 (時間軸)
2.ある一定の時間ごとの表示 (時間軸)
3.ある距離を達した時の表示 (距離軸)
4.カーブ前後の表示 (距離軸)
5.クラッシュした時の表示 (速度軸)
6.ゴールした時の表示 (距離軸)



【5.実際の挙動の流れを想定する(全体のイメージ)】
・レーススタート
- コースを用意し、timeを0.1秒インターバルでループ処理を開始する。
　これは、全部の車がコース総距離を突破した時点で抜ける
- 距離をためる配列を用意しておく
・0.1秒ごとに以下の処理をする
- 中間地点を入れる配列の用意
- 前回どのコースタイプを走っていたかを保存する配列を用意(2回連続でカーブにいる時などの表示の重複を防ぐため)
- 車の距離の加算
- コース中間地点を超えたかの比較
- コース総距離の比較
- 速度の調整(アクセルorブレーキ)
- コースタイプがカーブの場合、カーブの許容速度との比較も行い、超えていたらクラッシュ処理。
- 車の総距離順序を比較する。
・ゴール時
- 時間の表示
- 順位の表示